require("dotenv").config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require("grammy");

const { hydrate } = require("@grammyjs/hydrate");

const bot = new Bot(process.env.BOT_API_KEY);

bot.use(hydrate());

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
  },
  // {
  //   command: "hello",
  //   description: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
  // },
  // {
  //   command: "sayhello",
  //   description: "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
  // },
  // {
  //   command: "mood",
  //   description: "–û—Ü–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
  // },
  // {
  //   command: "share",
  //   description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏",
  // },
  // {
  //   command: "inline_keyboard",
  //   description: "–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
  // },
  {
    command: "menu",
    description: "–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é",
  },
]);

bot.command("start", async (ctx) => {
  await ctx.react("üëç", "üî•");
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç. –¢–≥ –∫–∞–Ω–∞–ª: <span class="tg-spoiler" href="https://t.me/pomazkovjs">–°—Å—ã–ª–∫–∞</span >',
    {
      parse_mode: "HTML",
    }
  );
});

const menuKeyboard = new InlineKeyboard()
  .text("–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", "order-status")
  .text("–û–±—Ä–∞—Ç–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "support");
const backKeyboard = new InlineKeyboard().text("< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "back");

bot.command("menu", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–µ—Ç–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
});

bot.callbackQuery("order-status", async (ctx) => {
  await ctx.callbackQuery.message.editText("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –í –ø—É—Ç–∏", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("support", async (ctx) => {
  await ctx.callbackQuery.message.editText("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å", {
    reply_markup: backKeyboard,
  });
  await ctx.answerCallbackQuery();
});

bot.callbackQuery("back", async (ctx) => {
  await ctx.callbackQuery.message.editText("–í—ã–±–µ—Ä–µ—Ç–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é", {
    reply_markup: menuKeyboard,
  });
  await ctx.answerCallbackQuery();
});

// bot.command("start", async (ctx) => {
//   await ctx.reply(
//     "–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç –¢–≥ –∫–∞–Ω–∞–ª: [–≠—Ç–æ —Å—Å—ã–ª–∫–∞] (https://t.me/pomazkovjs)",
//     {
//       parse_mode: "MarkdownV2",
//       disable_web_page_preview: true,
//     }
//   );
// });

// bot.command("mood", async (ctx) => {
//   const moodKeyboard = new Keyboard()
//     .text("–•–æ—Ä–æ—à–æ")
//     .row()
//     .text("–ù–æ—Ä–º")
//     .row()
//     .text("–ü–ª–æ—Ö–æ")
//     .resized();
//   // .oneTime();
//   await ctx.reply("–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", {
//     reply_markup: moodKeyboard,
//   });
// });
// bot.command("share", async (ctx) => {
//   const shareKeyboard = new Keyboard()
//     .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è")
//     .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
//     .requestPoll("–û–ø—Ä–æ—Å")
//     .placeholder("–£–∫–∞–∂–∏ –¥–∞–Ω–Ω—ã–µ")
//     .resized()
//     .oneTime();
//   await ctx.reply("–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?", {
//     reply_markup: shareKeyboard,
//   });
// });
// bot.command("inline_keyboard", async (ctx) => {
// const inlineKeyboard = new InlineKeyboard()
//   .text("1", "button-1")
//   .row()
//   .text("2", "button-2")
//   .text("3", "button-3")
//   .row()
//   .text("4", "button-4");
// await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É", {
//   reply_markup: inlineKeyboard,
//   const inlineKeyboard2 = new InlineKeyboard().url(
//     "–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª",
//     "https://t.me/pomazkovjs"
//   );
//   await ctx.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", {
//     reply_markup: inlineKeyboard2,
//   });
// });

// bot.callbackQuery(["button-1", "button-2", "button-3"], async (ctx) => {
//   //   await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É!");
//   await ctx.reply("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É");
// });

// const inlineKeyboard2 = new InlineKeyboard().url(
//   "–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫–∞–Ω–∞–ª",
//   "https://t.me/pomazkovjs"
// );
// await ctx.reply("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É", {
//   reply_markup: inlineKeyboard2,
// });

// bot.on("callback_query:data", async (ctx) => {
//   await ctx.answerCallbackQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É!");
//   await ctx.reply(`–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É: ${ctx.callbackQuery.data}`);
// });

// bot.on(":contact", async (ctx) => {
//   await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç");
// });

// bot.hears("–•–æ—Ä–æ—à–æ", async (ctx) => {
//   await ctx.reply("–ö–ª–∞—Å—Å!!!", {
//     reply_markup: { remove_keyboard: true },
//   });
// });

// bot.command(["sayhello", "hello", "say_hi"], async (ctx) => {
//   await ctx.reply("hello.");
// });

// bot.hears(/–ø–∏–ø–µ—Ü/, async (ctx) => {
//   await ctx.reply("–†—É–≥–∞–µ–º—Å—è?");
// });
// bot.hears("ID", async (ctx) => {
//   await ctx.reply(`–í–∞—à ID ${ctx.from.id}`);
// });

// bot.on("message", async (ctx) => {
//   await ctx.reply("–Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...");
//   console.log(ctx.from);
// });

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handing ubdate ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram", e);
  } else {
    console.error("Unknown error", e);
  }
});

bot.start();
